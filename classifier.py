import tkinter as tk
from tkinter import filedialog, Toplevel, Text, Scrollbar
from PIL import Image, ImageTk, ImageDraw, ImageFont
import cv2
import numpy as np
import tensorflow as tf
from ultralytics import YOLO
import csv

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π
ripeness_model = tf.keras.models.load_model("apple_classifier.h5")
yolo_model = YOLO("yolov8n.pt")  # –ö–∞—Å—Ç–æ–º–Ω—É—é –º–æ–¥–µ–ª—å –º–æ–∂–Ω–æ –≤–ø–∏—Ö–Ω—É—Ç—å —Å—é–¥–∞

# –ö–ª–∞—Å—Å—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
class_labels = ["–ù–µ–∑—Ä–µ–ª–æ–µ", "–ó—Ä–µ–ª–æ–µ", "–ü–µ—Ä–µ–∑—Ä–µ–ª–æ–µ"]
recommendations = {
    "–ù–µ–∑—Ä–µ–ª–æ–µ": "–û–∂–∏–¥–∞—Ç—å —Å–±–æ—Ä–∞.",
    "–ó—Ä–µ–ª–æ–µ": "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–±–∏—Ä–∞—Ç—å.",
    "–ü–µ—Ä–µ–∑—Ä–µ–ª–æ–µ": "–°—Ä–æ—á–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å!",
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∑—Ä–µ–ª–æ—Å—Ç–∏ –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–±–æ—Ä–∞
def predict_ripeness(crop):
    try:
        crop = cv2.resize(crop, (224, 224)) / 255.0
        crop = np.expand_dims(crop, axis=0)
        preds = ripeness_model.predict(crop)
        idx = np.argmax(preds)
        confidence = np.max(preds) * 100
        label = class_labels[idx]

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–±–æ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        if label=="–ù–µ–∑—Ä–µ–ª–æ–µ":
            if confidence < 60:
                wait_days = 3  # –û–∂–∏–¥–∞—Ç—å 3 –¥–Ω—è
            elif 60 <= confidence < 80:
                wait_days = 2  # –û–∂–∏–¥–∞—Ç—å 2 –¥–Ω—è
            else:
                wait_days = 1  # –°–æ–±—Ä–∞—Ç—å —Å—Ä–∞–∑—É
        else:
            wait_days = 0

        return label, confidence, wait_days
    except:
        return "–û—à–∏–±–∫–∞", 0, "–û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
class AppleRipenessApp:
    def __init__(self, root):
        self.root = root
        self.root.title("üçè YOLO + –ó—Ä–µ–ª–æ—Å—Ç—å —è–±–ª–æ–∫")
        self.canvas = tk.Canvas(root, width=800, height=600)
        self.canvas.pack()
        self.btn = tk.Button(root, text="üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∞–¥–∞", command=self.load_image)
        self.btn.pack(pady=10)
        self.btn_table = tk.Button(root, text="üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É", command=self.show_table)
        self.btn_table.pack(pady=10)

        self.img_cv = None
        self.photo = None
        self.boxes = []
        self.apple_data = []  # –î–∞–Ω–Ω—ã–µ –æ —è–±–ª–æ–∫–∞—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        self.count = 1  # –ù—É–º–µ—Ä–∞—Ü–∏—è —è–±–ª–æ–∫

        self.canvas.bind("<Button-3>", self.show_zoom)  # –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ –¥–ª—è –ª—É–ø—ã

    def load_image(self):
        path = filedialog.askopenfilename()
        if not path:
            return

        self.img_cv = cv2.imread(path)
        results = yolo_model(self.img_cv)[0]

        img_pil = Image.fromarray(cv2.cvtColor(self.img_cv, cv2.COLOR_BGR2RGB))
        draw = ImageDraw.Draw(img_pil)

        self.boxes = []
        self.apple_data = []  # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —è–±–ª–æ–∫–∞—Ö

        for box in results.boxes.xyxy.cpu().numpy():
            x1, y1, x2, y2 = map(int, box)
            crop = self.img_cv[y1:y2, x1:x2]
            label, conf, wait_days = predict_ripeness(crop)
            color = "green" if label == "–ó—Ä–µ–ª–æ–µ" else "yellow" if label == "–ù–µ–∑—Ä–µ–ª–æ–µ" else "red"
            draw.rectangle([x1, y1, x2, y2], outline=color, width=3)
            # –ü–∏—à–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –ø–æ–±–æ–ª—å—à–µ
            draw.text((x1 + 5, y1 - 20), f"{self.count}", fill=color, font=ImageFont.truetype("arial.ttf", 20))

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
            self.apple_data.append({
                "‚Ññ": self.count,
                "–ó—Ä–µ–ª–æ—Å—Ç—å": label,
                "–î–æ–≤–µ—Ä–∏–µ": f"{conf:.1f}%",
                "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è": f"–û–∂–∏–¥–∞—Ç—å —Å–±–æ—Ä–∞ —á–µ—Ä–µ–∑ {wait_days} –¥–Ω–µ–π"
            })
            self.count += 1

        img_resized = img_pil.resize((800, 600))
        self.tk_img = ImageTk.PhotoImage(img_resized)
        self.canvas.create_image(0, 0, anchor=tk.NW, image=self.tk_img)
        self.canvas.image = self.tk_img

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
        self.save_to_csv()

    def save_to_csv(self):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ CSV
        with open('apple_data.csv', mode='w', newline='', encoding='utf-8') as file:
            writer = csv.DictWriter(file, fieldnames=["‚Ññ", "–ó—Ä–µ–ª–æ—Å—Ç—å", "–î–æ–≤–µ—Ä–∏–µ", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è"])
            writer.writeheader()
            for row in self.apple_data:
                writer.writerow(row)
        print("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ apple_data.csv")

    def show_zoom(self, event):
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ª—É–ø—É
        if self.img_cv is None:
            return

        x, y = event.x, event.y
        zoom_radius = 100
        zoomed_img = self.img_cv[y - zoom_radius:y + zoom_radius, x - zoom_radius:x + zoom_radius]
        zoomed_img_pil = Image.fromarray(cv2.cvtColor(zoomed_img, cv2.COLOR_BGR2RGB))
        zoomed_img_resized = zoomed_img_pil.resize((zoom_radius * 2, zoom_radius * 2), Image.ANTIALIAS)

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ª—É–ø—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if hasattr(self, 'zoomed_image'):
            self.canvas.delete(self.zoomed_image)

        # –î–æ–±–∞–≤–ª—è–µ–º –ª—É–ø—É –Ω–∞ —Ö–æ–ª—Å—Ç
        self.zoomed_image = self.canvas.create_image(x + 10, y - 10, image=ImageTk.PhotoImage(zoomed_img_resized))

    def show_table(self):
        # –°–æ–∑–¥–∞—ë–º –æ–∫–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        table_window = Toplevel(self.root)
        table_window.title("–¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö –æ —è–±–ª–æ–∫–∞—Ö")

        text_widget = Text(table_window, wrap=tk.WORD, width=100, height=20)
        text_widget.pack()

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã–º–∏ –æ —è–±–ª–æ–∫–∞—Ö
        text_widget.insert(tk.END, "‚Ññ  |  –ó—Ä–µ–ª–æ—Å—Ç—å  |  –î–æ–≤–µ—Ä–∏–µ  |  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è\n")
        text_widget.insert(tk.END, "-"*60 + "\n")

        for apple in self.apple_data:
            text_widget.insert(tk.END, f"{apple['‚Ññ']}  |  {apple['–ó—Ä–µ–ª–æ—Å—Ç—å']}  |  {apple['–î–æ–≤–µ—Ä–∏–µ']}  |  {apple['–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è']}\n")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        scroll = Scrollbar(table_window, command=text_widget.yview)
        scroll.pack(side=tk.RIGHT, fill=tk.Y)
        text_widget.config(yscrollcommand=scroll.set)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    root = tk.Tk()
    app = AppleRipenessApp(root)
    root.mainloop()
